Block ciphers:
longer the key, slower the cipher is, more secure.
key k expands into a sequence k1 to kn called round keys. iteratively encrypts the message again and again called round function R(k,m) - inputs are round key and current state of message, yield final ouput - cipher 
the 2 block ciphers have considerably less performance numbers than stream ciphers.
Pseudo random function (PRF): an abstract concept, no need to be invertible, just be evaluatable. Pseudo random permutation (PRP) - ideal, one-to-one, invertible.
the adversar gets either the cipher from random function or PRF. If PRF is secure, any random function is indistinguishable from PRF in SF. so the adversary couldn't be able to trace out.
PRF to PRG: seed space = key space. key property - parallelizable (both even and odd cores are computed, implies that it run twice as fast as if single core is used). it's an example of parallelizable stream cipher, but previously in stream ciphers, we couldn't increase the speed by increasing the processors.

DES, 16 round Feistel Network Mechanism (general method for building invertible functions viz block ciphers from arbitrary functions)
1970 - Lucipher key length = block length = 128 bits -> DES key length = 56 bits and block length = 64 bits.
1997 - DES was broken by exhaustive search.
2000 - Rijndael, AES, successful, used in banks for electronic clearhouses and in commerce.
theorem: secure PRF - when performed Feistel network 3 times yields secure PRP.

32 bit input values (X) + 48 bit round keys. 32 bit - through expansion box, this expansion box basically take thirty two bits and maps them into 48 bits, the expansion box replicates some bits and move other bits around. for example, bit #1 of X is replicated into positions 2 and 48 in the output. Bit #2 of X is positioned in as bit #3 of the output. And so on and so forth, just by replicating some of the bits of X, we expand the input into 48 bits. Then compute an XOR with the round key. 48 bits broken into 8 groups, each into S boxes (takes 6 bits, gives 4 bits), 32 bits ready to be fed into another permutation.
S boxes are the only nonlinear part of DES. So if the S boxes were linear, then the entire circuit is linear and therefore can be expressed as this matrix. Now if that's the case then DES would be terrible as a secure pseudorandom permutation. And let me give you a very simple example. Basically if you did the XOR of three outputs of DES, well let's think what that means. Basically we would be looking at B times, the matrix B that defines DES, times, one vector XOR B times another vector, XOR B times a third vector. We could take the B out of the parentheses so we'd be basically doing B times this vector over here. But of course K XOR K XOR K, this is just K. And so if you think about what that means, basically we just got back DES of K at the point M1 XOR M2 XOR M3. But this means that now DES has this horrible relation. That can be tested. Right? So, basically, if you XOR the output of three values, M1, M2, M3, you'll get the value of DES, at the point M1 XOR M2 XOR M3. Now this is not a relation that is going to hold for a random function. A random function is not going to satisfy this equality. And so you get a very easy test to tell you that DES is not a random function
You just need 832 input output pairs, and you'll be able recover the entire secret key. And so if the S boxes were linear, DES would be completely insecure. It turns out, actually, even if the S boxes were close to being linear. In other words, the S boxes were linear most of the time. So maybe for 60 out of the 64 inputs, the S boxes were linear. It turns out that would also be enough to break DES.

exhaustive search attacks:
